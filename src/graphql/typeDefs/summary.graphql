type Summary {
  id: ID!
  topics: [TopicSummary!]!
  totalArticles: Int!
  timeRange: TimeRange!
  generatedAt: DateTime!
  articleIds: [ID!]!
}

type TopicSummary {
  topic: String!
  summary: String!
  articles: [Article!]!
  sources: [Source!]!
  count: Int!
}

type TimeRange {
  startDate: DateTime!
  endDate: DateTime!
}

type SummaryJobResponse {
  jobId: ID!
  status: String!
}

type SummaryJobStatus {
  jobId: ID!
  status: String!
  progress: Float!
  currentTopic: Int!
  totalTopics: Int!
  result: Summary
  error: String
  createdAt: DateTime!
  startedAt: DateTime
  completedAt: DateTime
}

extend type Query {
  summary(
    startDate: DateTime!
    endDate: DateTime!
    topics: [String!]
    forceRefresh: Boolean
  ): Summary!

  summaries(
    startDate: DateTime
    endDate: DateTime
    limit: Int
  ): [Summary!]!

  savedSummary(id: ID!): Summary

  summaryJobStatus(jobId: ID!): SummaryJobStatus
}

extend type Mutation {
  cleanOldSummaries(olderThanDays: Int!): Int!

  generateSummaryAsync(
    startDate: DateTime!
    endDate: DateTime!
    topics: [String]
  ): SummaryJobResponse!
}

scalar DateTime
